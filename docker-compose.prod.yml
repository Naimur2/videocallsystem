# Production overrides for docker-compose.ymlversion: '3.8'

# This file is used in GitHub Actions deployment

services:

services:  frontend:

  app:    build:

    image: ghcr.io/naimur2/videocallsystem:latest      context: ./videocall

    build:      dockerfile: Dockerfile.prod

      context: .    ports:

      args:      - "3000:3000"

        - NEXT_PUBLIC_BACKEND_URL=https://meeting.naimur-rahaman.com/api    environment:

        - NEXT_PUBLIC_SOCKET_URL=https://meeting.naimur-rahaman.com      - NODE_ENV=production

        - NEXT_PUBLIC_TURN_SERVER_HOST=meeting.naimur-rahaman.com      - NEXT_PUBLIC_BACKEND_URL=${BACKEND_URL:-http://backend:3001}

        - NEXT_PUBLIC_TURN_SERVER_PORT=3478      - NEXT_PUBLIC_SOCKET_URL=${SOCKET_URL:-ws://backend:3001}

        - NEXT_PUBLIC_TURN_USERNAME=mediasoup      - NEXT_PUBLIC_TURN_SERVER=${TURN_SERVER:-standard.relay.metered.ca:80}

        - NEXT_PUBLIC_TURN_PASSWORD=mediasoupTurn2024!      - NEXT_PUBLIC_TURN_USERNAME=${TURN_USERNAME}

        - NEXT_PUBLIC_APP_NAME=MediaSoup Video Call      - NEXT_PUBLIC_TURN_CREDENTIAL=${TURN_CREDENTIAL}

        - NEXT_PUBLIC_APP_VERSION=1.0.0    depends_on:

    environment:      - backend

      # Production environment variables from secrets    networks:

      - DATABASE_URL=${DATABASE_URL}      - mediasoup-network

      - REDIS_URL=${REDIS_URL}    restart: unless-stopped

      - JWT_SECRET=${JWT_SECRET}    healthcheck:

      - SESSION_SECRET=${SESSION_SECRET}      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]

      - MEDIASOUP_ANNOUNCED_IP=${MEDIASOUP_ANNOUNCED_IP}      interval: 30s

      - RTC_MIN_PORT=${RTC_MIN_PORT}      timeout: 10s

      - RTC_MAX_PORT=${RTC_MAX_PORT}      retries: 3

      - TURN_USERNAME=${TURN_USERNAME}

      - TURN_CREDENTIAL=${TURN_CREDENTIAL}  backend:

      - TURN_SERVER=${TURN_SERVER}    build:

      - STUN_SERVER=${STUN_SERVER}      context: ./videocallbackend

      - NODE_ENV=production      dockerfile: Dockerfile.prod

      - DOMAIN=${DOMAIN}    ports:

      - PORT=${PORT}      - "3001:3001"

      - CORS_ORIGIN=${CORS_ORIGIN}      - "40000-49999:40000-49999/udp"

    environment:

  caddy:      - NODE_ENV=production

    environment:      - PORT=3001

      - DOMAIN=${DOMAIN:-meeting.naimur-rahaman.com}      - MEDIASOUP_LISTEN_IP=0.0.0.0

      - MEDIASOUP_ANNOUNCED_IP=${MEDIASOUP_ANNOUNCED_IP}

  coturn:      - RTC_MIN_PORT=40000

    ports:      - RTC_MAX_PORT=49999

      - "3478:3478/tcp"      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}

      - "3478:3478/udp"      - POSTGRES_PORT=${POSTGRES_PORT:-5432}

      - "5349:5349/tcp"        - POSTGRES_DB=${POSTGRES_DB:-mediasoup}

      - "5349:5349/udp"      - POSTGRES_USER=${POSTGRES_USER:-mediasoup}

      - "49152-65535:49152-65535/udp"  # Full range for production      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

    environment:      - REDIS_HOST=${REDIS_HOST:-redis}

      - TURN_USERNAME=${COTURN_USERNAME:-mediasoup}      - REDIS_PORT=${REDIS_PORT:-6379}

      - TURN_PASSWORD=${COTURN_PASSWORD:-mediasoupTurn2024!}      - REDIS_PASSWORD=${REDIS_PASSWORD}

      - JWT_SECRET=${JWT_SECRET}

  postgres:      - TURN_SERVER=${TURN_SERVER:-standard.relay.metered.ca:80}

    environment:      - TURN_USERNAME=${TURN_USERNAME}

      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-YOUR_SECURE_PASSWORD}      - TURN_CREDENTIAL=${TURN_CREDENTIAL}
    depends_on:
      - postgres
      - redis
    networks:
      - mediasoup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mediasoup}
      - POSTGRES_USER=${POSTGRES_USER:-mediasoup}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - mediasoup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mediasoup}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mediasoup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - mediasoup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  mediasoup-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local