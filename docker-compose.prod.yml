version: '3.8'

services:
  frontend:
    build:
      context: ./videocall
      dockerfile: Dockerfile.prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=${BACKEND_URL:-http://backend:3001}
      - NEXT_PUBLIC_SOCKET_URL=${SOCKET_URL:-ws://backend:3001}
      - NEXT_PUBLIC_TURN_SERVER=${TURN_SERVER:-standard.relay.metered.ca:80}
      - NEXT_PUBLIC_TURN_USERNAME=${TURN_USERNAME}
      - NEXT_PUBLIC_TURN_CREDENTIAL=${TURN_CREDENTIAL}
    depends_on:
      - backend
    networks:
      - mediasoup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./videocallbackend
      dockerfile: Dockerfile.prod
    ports:
      - "3001:3001"
      - "40000-49999:40000-49999/udp"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MEDIASOUP_LISTEN_IP=0.0.0.0
      - MEDIASOUP_ANNOUNCED_IP=${MEDIASOUP_ANNOUNCED_IP}
      - RTC_MIN_PORT=40000
      - RTC_MAX_PORT=49999
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-mediasoup}
      - POSTGRES_USER=${POSTGRES_USER:-mediasoup}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - TURN_SERVER=${TURN_SERVER:-standard.relay.metered.ca:80}
      - TURN_USERNAME=${TURN_USERNAME}
      - TURN_CREDENTIAL=${TURN_CREDENTIAL}
    depends_on:
      - postgres
      - redis
    networks:
      - mediasoup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mediasoup}
      - POSTGRES_USER=${POSTGRES_USER:-mediasoup}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - mediasoup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mediasoup}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mediasoup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - mediasoup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  mediasoup-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local