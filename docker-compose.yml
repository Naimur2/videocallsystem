services:
  # Caddy reverse proxy
  caddy:
    image: caddy:2.7-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    environment:
      - DOMAIN=${DOMAIN:-localhost}
    depends_on:
      - app
    restart: unless-stopped

  # Main application
  app:
    build: .
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://mediasoup:password@postgres:5432/mediasoup}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - SESSION_SECRET=${SESSION_SECRET:-change-this-in-production}
      - MEDIASOUP_ANNOUNCED_IP=${MEDIASOUP_ANNOUNCED_IP:-127.0.0.1}
      - RTC_MIN_PORT=${RTC_MIN_PORT:-40000}
      - RTC_MAX_PORT=${RTC_MAX_PORT:-49999}
      - TURN_USERNAME=${TURN_USERNAME:-}
      - TURN_CREDENTIAL=${TURN_CREDENTIAL:-}
      - TURN_SERVER=${TURN_SERVER:-}
      - STUN_SERVER=${STUN_SERVER:-stun:stun.l.google.com:19302}
      - NODE_ENV=${NODE_ENV:-development}
      - DOMAIN=${DOMAIN:-localhost}
    ports:
      - "40000-49999:40000-49999/udp"  # WebRTC media ports
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mediasoup
      POSTGRES_USER: mediasoup
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Redis cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:
  caddy_logs:
