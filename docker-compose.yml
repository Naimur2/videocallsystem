# Production Docker Compose with Pre-built GHCR Images
# Each service uses a dedicated image built and pushed separately

services:
  # Caddy reverse proxy (uses official image)
  caddy:
    image: caddy:2.7-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    environment:
      - DOMAIN=${DOMAIN:-localhost}
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service (Next.js)
  frontend:
    image: ghcr.io/naimur2/videocallsystem-frontend:latest
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.4'
        reservations:
          memory: 256M
          cpus: '0.2'
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=https://${DOMAIN:-localhost}/api
      - NEXT_PUBLIC_SOCKET_URL=https://${DOMAIN:-localhost}
      - NEXT_PUBLIC_TURN_SERVER_HOST=${DOMAIN:-localhost}
      - NEXT_PUBLIC_TURN_SERVER_PORT=3478
      - NEXT_PUBLIC_TURN_USERNAME=${COTURN_USERNAME:-mediasoup}
      - NEXT_PUBLIC_TURN_PASSWORD=${COTURN_PASSWORD:-mediasoupTurn2024!}
      - NEXT_PUBLIC_APP_NAME=MediaSoup Video Call
      - NEXT_PUBLIC_APP_VERSION=1.0.0
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 1m

  # Backend Service (Node.js/Express)
  backend:
    image: ghcr.io/naimur2/videocallsystem-backend:latest
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.6'
        reservations:
          memory: 512M
          cpus: '0.3'
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://mediasoup:password@postgres:5432/mediasoup}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - SESSION_SECRET=${SESSION_SECRET:-change-this-in-production}
      - MEDIASOUP_ANNOUNCED_IP=${MEDIASOUP_ANNOUNCED_IP:-127.0.0.1}
      - RTC_MIN_PORT=${RTC_MIN_PORT:-49152}
      - RTC_MAX_PORT=${RTC_MAX_PORT:-49171}
      - TURN_USERNAME=${COTURN_USERNAME:-mediasoup}
      - TURN_CREDENTIAL=${COTURN_PASSWORD:-mediasoupTurn2024!}
      - TURN_SERVER=${TURN_SERVER:-turn:eturnal:3478}
      - STUN_SERVER=${STUN_SERVER:-stun:eturnal:3478}
      - NODE_ENV=production
      - DOMAIN=${DOMAIN:-localhost}
      - PORT=${PORT:-8080}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://localhost}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      eturnal:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 1m

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.15'
    environment:
      - POSTGRES_DB=mediasoup
      - POSTGRES_USER=mediasoup
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-YOUR_SECURE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mediasoup -d mediasoup"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache/Session Store
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # eTURN server for WebRTC NAT traversal (modern CoTURN replacement)
  eturnal:
    image: ghcr.io/naimur2/videocallsystem-eturnal:latest
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "3478:3478/tcp"
      - "3478:3478/udp"  
      - "5349:5349/tcp"
      - "5349:5349/udp"
      # Optimized port range for t2.large (20 ports)
      - "49152-49171:49152-49171/udp"
    volumes:
      - eturnal_data:/var/lib/eturnal
      - eturnal_logs:/var/log/eturnal
    environment:
      - ETURNAL_RELAY_IPV4_ADDR=${MEDIASOUP_ANNOUNCED_IP:-127.0.0.1}
      - ETURNAL_SECRET=${COTURN_PASSWORD:-mediasoupTurn2024!}
      - ETURNAL_REALM=${DOMAIN:-localhost}
      - ETURNAL_LOG_LEVEL=info
      - ETURNAL_RELAY_MIN_PORT=49152
      - ETURNAL_RELAY_MAX_PORT=49171
      - ETURNAL_MAX_ALLOCATIONS=100
      - ETURNAL_MAX_PERMISSIONS=10
      - ETURNAL_MAX_BPS=1000000
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "nc", "-u", "-z", "localhost", "3478"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Legacy Full-Stack App (if still needed for migration)
  legacy-app:
    image: ghcr.io/${GITHUB_REPOSITORY:-naimur2/videocallsystem}-app:latest
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://mediasoup:password@postgres:5432/mediasoup}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - SESSION_SECRET=${SESSION_SECRET:-change-this-in-production}
      - MEDIASOUP_ANNOUNCED_IP=${MEDIASOUP_ANNOUNCED_IP:-127.0.0.1}
      - RTC_MIN_PORT=${RTC_MIN_PORT:-40000}
      - RTC_MAX_PORT=${RTC_MAX_PORT:-49999}
      - TURN_USERNAME=${COTURN_USERNAME:-mediasoup}
      - TURN_CREDENTIAL=${COTURN_PASSWORD:-mediasoupTurn2024!}
      - TURN_SERVER=${TURN_SERVER:-turn:eturnal:3478}
      - STUN_SERVER=${STUN_SERVER:-stun:eturnal:3478}
      - NODE_ENV=production
      - DOMAIN=${DOMAIN:-localhost}
      - PORT=${PORT:-3000}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://localhost}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      eturnal:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 1m
    profiles:
      - legacy  # Only start with --profile legacy

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:
  caddy_logs:
  eturnal_data:
  eturnal_logs:

networks:
  default:
    driver: bridge