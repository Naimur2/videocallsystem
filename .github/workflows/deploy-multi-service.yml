name: Deploy Multi-Service Application

on:
  workflow_run:
    workflows: ["Build and Push Multi-Service Images"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: read

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/videocallsystem

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Login to GitHub Container Registry
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
    
    - name: Create environment file
      run: |
        cat > .env << 'EOF'
        ${{ secrets.ENV_VARS }}
        GITHUB_REPOSITORY=${{ github.repository }}
        EOF

    - name: Pull all service images
      run: |
        echo "🔄 Pulling images sequentially to prevent resource exhaustion..."
        
        # Pull base images first (sequential to avoid overwhelming the system)
        echo "📦 Pulling base images..."
        sudo docker pull redis:7-alpine
        sudo docker pull postgres:15-alpine
        sudo docker pull caddy:2.7-alpine
        
        echo "⏳ Brief pause to prevent resource spikes..."
        sleep 5
        
        # Pull our custom service images from GHCR (sequential)
        echo "🏗️ Pulling custom service images..."
        sudo docker pull ghcr.io/naimur2/videocallsystem-frontend:latest
        sudo docker pull ghcr.io/naimur2/videocallsystem-backend:latest
        sudo docker pull ghcr.io/naimur2/videocallsystem-coturn:latest
        
        echo "✅ All images pulled successfully"
        sudo docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep -E "(ghcr.io/naimur2/videocallsystem|redis|postgres|caddy)" || true
    
    - name: Deploy with multi-service compose
      run: |
        echo "🛑 Stopping existing services..."
        sudo docker compose -f docker-compose.yml down --remove-orphans || true
        
        echo "⏳ Waiting for cleanup to complete..."
        sleep 10
        
        echo "🔍 Validating compose configuration..."
        sudo docker compose -f docker-compose.yml config --quiet
        
        echo "🧹 Gentle cleanup to prevent resource exhaustion..."
        sudo docker container prune -f || true
        sleep 5
        sudo docker image prune -f || true
        
        echo "� AWS EC2 t2.large resource check:"
        echo "Memory:"
        free -h || true
        echo "CPU:"
        nproc || true
        echo "Disk:"
        df -h / || true
        
        echo "�📋 Available images:"
        sudo docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | head -10
        
        echo "🚀 Starting services one by one to prevent resource spikes..."
        
        # Start database services first
        echo "📊 Starting database services..."
        sudo docker compose -f docker-compose.yml up -d postgres redis
        echo "⏳ Waiting for database services to be ready..."
        timeout 60 sudo docker compose -f docker-compose.yml exec postgres pg_isready -U mediasoup -d mediasoup || echo "PostgreSQL timeout"
        timeout 30 sudo docker compose -f docker-compose.yml exec redis redis-cli ping || echo "Redis timeout"
        sleep 10
        
        # Start application services with individual checks
        echo "🎯 Starting application services..."
        sudo docker compose -f docker-compose.yml up -d backend
        echo "⏳ Waiting for backend to start..."
        sleep 20
        sudo docker compose -f docker-compose.yml logs --tail=10 backend || true
        
        sudo docker compose -f docker-compose.yml up -d coturn  
        echo "⏳ Waiting for CoTURN to start (with crash monitoring)..."
        sleep 5
        
        # Monitor CoTURN for crashes
        echo "🔍 Checking if CoTURN is running without crashing..."
        for i in {1..6}; do
          if sudo docker compose -f docker-compose.yml ps coturn | grep -q "running"; then
            echo "✅ CoTURN is stable after ${i}0 seconds"
            break
          elif sudo docker compose -f docker-compose.yml ps coturn | grep -q "exited"; then
            echo "❌ CoTURN crashed! Stopping deployment to prevent server crash"
            sudo docker compose -f docker-compose.yml logs --tail=20 coturn
            sudo docker compose -f docker-compose.yml down coturn
            exit 1
          else
            echo "⏳ CoTURN still starting... (attempt $i/6)"
            sleep 10
          fi
        done
        
        echo "🔍 CoTURN container status:"
        sudo docker compose -f docker-compose.yml ps coturn || true
        echo "📋 CoTURN logs:"
        sudo docker compose -f docker-compose.yml logs --tail=15 coturn || true
        echo "🔗 CoTURN ports:"
        sudo docker port $(sudo docker compose -f docker-compose.yml ps -q coturn) || true
        echo "💾 System memory after CoTURN start:"
        free -h || true
        
        # Start frontend and proxy
        echo "🌐 Starting frontend and proxy..."
        sudo docker compose -f docker-compose.yml up -d frontend
        sleep 15
        sudo docker compose -f docker-compose.yml logs --tail=10 frontend || true
        
        sudo docker compose -f docker-compose.yml up -d caddy
        sleep 10
        
        echo "📊 Final service status:"
        sudo docker compose -f docker-compose.yml ps
        
        echo "✅ All services deployed!"
    
    - name: Verify deployment
      run: |
        echo "⏳ Waiting for services to fully initialize..."
        sleep 30
        
        echo "📊 Service Status:"
        sudo docker compose -f docker-compose.yml ps || true
        
        echo ""
        echo "💾 System Resources:"
        free -h || true
        df -h / || true
        
        echo ""
        echo "🔍 Health Checks (with timeouts):"
        timeout 30 sudo docker compose -f docker-compose.yml exec -T frontend curl -f http://localhost:3000/api/health || echo "Frontend not ready yet"
        timeout 30 sudo docker compose -f docker-compose.yml exec -T backend curl -f http://localhost:8080/api/health || echo "Backend not ready yet"
        
        echo ""
        echo "📋 Recent Logs (limited to prevent overflow):"
        sudo docker compose -f docker-compose.yml logs --tail=3 frontend backend || true
        
        echo ""
        echo "🎯 Deployment Summary:"
        echo "- Frontend: ghcr.io/naimur2/videocallsystem-frontend:latest"
        echo "- Backend: ghcr.io/naimur2/videocallsystem-backend:latest" 
        echo "- CoTURN: ghcr.io/naimur2/videocallsystem-coturn:latest"
        echo "- Database: postgres:15-alpine"
        echo "- Cache: redis:7-alpine"
        echo "- Proxy: caddy:2.7-alpine"

    - name: Legacy app deployment (optional)
      if: github.event.inputs.deploy_legacy == 'true'
      run: |
        echo "🔄 Deploying legacy app as well..."
        sudo docker compose --profile legacy up -d legacy-app
        echo "✅ Legacy app deployed"