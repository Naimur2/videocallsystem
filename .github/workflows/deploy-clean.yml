name: Deploy MediaSoup Video Call

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: naimur2/videocallsystem

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ env.IMAGE_NAME }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          ghcr.io/${{ env.IMAGE_NAME }}:latest
          ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    needs: build
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Login to GitHub Container Registry
      run: |
        echo ${{ secrets.GH_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
    
    - name: Create environment file
      run: |
        cat > .env << 'EOF'
        ${{ secrets.ENV_VARS }}
        EOF

    - name: Setup Docker Compose
      run: |
        if ! sudo docker compose version 2>/dev/null; then
          echo "Installing docker-compose..."
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
        fi
        
    - name: Clear old resources
      run: |
        sudo docker container prune -f || true
        sudo docker image prune -f || true
        sudo docker builder prune -f || true
    
    - name: Pull latest image
      run: |
        echo "🔄 Pulling pre-built image from GHCR..."
        sudo docker pull ghcr.io/${{ env.IMAGE_NAME }}:latest
        echo "✅ Image pulled successfully"
        sudo docker images | grep ghcr.io/${{ env.IMAGE_NAME }}
    
    - name: Deploy with docker compose
      run: |
        echo "🛑 Stopping existing services..."
        sudo docker compose -f docker-compose.yml -f docker-compose.production.yml down --remove-orphans || true
        
        echo "🔍 Validating compose configuration..."
        sudo docker compose -f docker-compose.yml -f docker-compose.production.yml config --dry-run
        
        echo "🚀 Starting services with pre-built image..."
        sudo docker compose -f docker-compose.yml -f docker-compose.production.yml up -d \
          --pull always \
          --no-build \
          --force-recreate \
          --wait
        
        echo "✅ All services are healthy and ready!"
    
    - name: Verify deployment
      run: |
        echo "📊 Final service status:"
        sudo docker compose -f docker-compose.yml -f docker-compose.production.yml ps
        
        echo "📋 Recent logs:"
        sudo docker compose -f docker-compose.yml -f docker-compose.production.yml logs --tail=10
        
        echo "🔍 Health check:"
        sudo docker compose -f docker-compose.yml -f docker-compose.production.yml exec -T app curl -f http://localhost:3000/api/health || echo "Health check will be available once app starts"