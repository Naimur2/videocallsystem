name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Prevent concurrent deployments
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: naimur2/videocallsystem

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        build-args: |
          NEXT_PUBLIC_BACKEND_URL=https://meeting.naimur-rahaman.com/api
          NEXT_PUBLIC_SOCKET_URL=https://meeting.naimur-rahaman.com
          NEXT_PUBLIC_TURN_SERVER_HOST=meeting.naimur-rahaman.com
          NEXT_PUBLIC_TURN_SERVER_PORT=3478
          NEXT_PUBLIC_TURN_USERNAME=mediasoup
          NEXT_PUBLIC_TURN_PASSWORD=mediasoupTurn2024!
          NEXT_PUBLIC_APP_NAME=MediaSoup Video Call
          NEXT_PUBLIC_APP_VERSION=1.0.0
        tags: |
          ghcr.io/${{ env.IMAGE_NAME }}:latest
          ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    needs: build
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Login to GitHub Container Registry
      run: |
        echo ${{ secrets.GH_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
    
    - name: Create environment file
      run: |
        cat > .env << 'EOF'
        ${{ secrets.ENV_VARS }}
        EOF

    - name: Setup Docker Compose
      run: |
        # Check if docker compose is available
        if ! sudo docker compose version 2>/dev/null; then
          echo "Installing docker-compose..."
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
        fi
        
    - name: Clear old images and containers
      run: |
        sudo docker container prune -f || true
        sudo docker image prune -f || true
        sudo docker builder prune -f || true
    
    - name: Pull latest image
      run: |
        echo "Pulling pre-built image from GHCR..."
        sudo docker pull ghcr.io/${{ env.IMAGE_NAME }}:latest
        echo "Verifying image..."
        sudo docker images | grep ghcr.io/${{ env.IMAGE_NAME }}
    
    - name: Deploy with docker compose
      run: |
        echo "Stopping existing services..."
        sudo docker compose -f docker-compose.yml -f docker-compose.production.yml down --remove-orphans || true
        
        # Temporarily modify compose file to force image usage
        echo "Creating temporary production-only compose file..."
        cat > docker-compose.production-only.yml << 'EOF'
        version: '3.8'
        services:
          caddy:
            image: caddy:2.7-alpine
            ports:
              - "80:80"
              - "443:443"
            volumes:
              - ./Caddyfile:/etc/caddy/Caddyfile
              - caddy_data:/data
              - caddy_config:/config
              - caddy_logs:/var/log/caddy
            environment:
              - DOMAIN=${DOMAIN:-meeting.naimur-rahaman.com}
            depends_on:
              app:
                condition: service_healthy
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health", "||", "exit", "1"]
              interval: 30s
              timeout: 10s
              retries: 3

          app:
            image: ghcr.io/naimur2/videocallsystem:latest
            environment:
              - DATABASE_URL=${DATABASE_URL}
              - REDIS_URL=${REDIS_URL}
              - JWT_SECRET=${JWT_SECRET}
              - SESSION_SECRET=${SESSION_SECRET}
              - MEDIASOUP_ANNOUNCED_IP=${MEDIASOUP_ANNOUNCED_IP}
              - RTC_MIN_PORT=${RTC_MIN_PORT}
              - RTC_MAX_PORT=${RTC_MAX_PORT}
              - TURN_USERNAME=${TURN_USERNAME}
              - TURN_CREDENTIAL=${TURN_CREDENTIAL}
              - TURN_SERVER=${TURN_SERVER}
              - STUN_SERVER=${STUN_SERVER}
              - NODE_ENV=production
              - DOMAIN=${DOMAIN}
              - PORT=${PORT}
              - CORS_ORIGIN=${CORS_ORIGIN}
            depends_on:
              postgres:
                condition: service_healthy
              redis:
                condition: service_healthy
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
              interval: 30s
              timeout: 10s
              retries: 3

          postgres:
            image: postgres:15-alpine
            environment:
              POSTGRES_DB: mediasoup
              POSTGRES_USER: mediasoup
              POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-YOUR_SECURE_PASSWORD}
            volumes:
              - ./data/postgres:/var/lib/postgresql/data
            restart: unless-stopped
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U mediasoup -d mediasoup"]
              interval: 30s
              timeout: 10s
              retries: 3

          redis:
            image: redis:7-alpine
            volumes:
              - ./data/redis:/data
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "redis-cli", "ping"]
              interval: 30s
              timeout: 10s
              retries: 3

          coturn:
            build: ./coturn
            ports:
              - "3478:3478/tcp"
              - "3478:3478/udp"
              - "5349:5349/tcp"
              - "5349:5349/udp"
              - "49152-65535:49152-65535/udp"
            environment:
              - TURN_USERNAME=${COTURN_USERNAME:-mediasoup}
              - TURN_PASSWORD=${COTURN_PASSWORD:-mediasoupTurn2024!}
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "nc", "-z", "localhost", "3478"]
              interval: 30s
              timeout: 10s
              retries: 3

        volumes:
          caddy_data:
          caddy_config:
          caddy_logs:
        EOF
        
        echo "Verifying production compose uses pre-built image..."
        sudo docker compose -f docker-compose.production-only.yml config | grep -A 2 -B 2 "image:"
        
        echo "Starting services with health checks and pre-built image..."
        sudo docker compose -f docker-compose.production-only.yml up -d --no-build --force-recreate --wait
        echo "✅ All services are healthy and ready!"
    
    - name: Verify deployment
      run: |
        echo "📊 Final service status:"
        sudo docker compose -f docker-compose.production-only.yml ps
        echo "🏥 Health check status:"
        sudo docker compose -f docker-compose.production-only.yml ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
        echo "🔍 Recent logs (last 5 lines per service):"
        sudo docker compose -f docker-compose.production-only.yml logs --tail=5
