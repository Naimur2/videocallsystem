name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Prevent concurrent deployments
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: naimur2/videocallsystem

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        build-args: |
          NEXT_PUBLIC_BACKEND_URL=https://meeting.naimur-rahaman.com/api
          NEXT_PUBLIC_SOCKET_URL=https://meeting.naimur-rahaman.com
          NEXT_PUBLIC_TURN_SERVER_HOST=meeting.naimur-rahaman.com
          NEXT_PUBLIC_TURN_SERVER_PORT=3478
          NEXT_PUBLIC_TURN_USERNAME=mediasoup
          NEXT_PUBLIC_TURN_PASSWORD=mediasoupTurn2024!
          NEXT_PUBLIC_APP_NAME=MediaSoup Video Call
          NEXT_PUBLIC_APP_VERSION=1.0.0
        tags: |
          ghcr.io/${{ env.IMAGE_NAME }}:latest
          ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    needs: build
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Login to GitHub Container Registry
      run: |
        echo ${{ secrets.GH_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
    
    - name: Create environment file
      run: |
        cat > .env << 'EOF'
        ${{ secrets.ENV_VARS }}
        EOF

    - name: Setup Docker Compose
      run: |
        # Check if docker compose is available
        if ! sudo docker compose version 2>/dev/null; then
          echo "Installing docker-compose..."
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
        fi
        
    - name: Clear old images and containers
      run: |
        sudo docker container prune -f || true
        sudo docker image prune -f || true
        sudo docker builder prune -f || true
    
    - name: Pull latest image
      run: |
        echo "Pulling pre-built image from GHCR..."
        sudo docker pull ghcr.io/${{ env.IMAGE_NAME }}:latest
        echo "Verifying image..."
        sudo docker images | grep ghcr.io/${{ env.IMAGE_NAME }}
    
    - name: Deploy with docker compose
      run: |
        echo "Stopping existing services..."
        sudo docker compose -f docker-compose.yml -f docker-compose.production.yml down --remove-orphans || true
        
        echo "Starting services with pre-built GHCR image..."
        sudo docker compose -f docker-compose.yml -f docker-compose.production.yml up -d --pull always --no-build --force-recreate --wait
        echo "✅ All services are healthy and ready!"
    
    - name: Verify deployment
      run: |
        echo "📊 Final service status:"
        sudo docker compose -f docker-compose.yml -f docker-compose.production.yml ps
        echo "🏥 Health check status:"
        sudo docker compose -f docker-compose.yml -f docker-compose.production.yml ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
        echo "🔍 Recent logs (last 5 lines per service):"
        sudo docker compose -f docker-compose.yml -f docker-compose.production.yml logs --tail=5
